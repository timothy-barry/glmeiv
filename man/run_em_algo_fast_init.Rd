% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aux_em_algo_functs.R
\name{run_em_algo_fast_init}
\alias{run_em_algo_fast_init}
\title{Run EM algo with fast init}
\usage{
run_em_algo_fast_init(
  m,
  g,
  m_fam,
  g_fam,
  covariate_matrix,
  m_offset,
  g_offset,
  n_em_rep = 15,
  pi_guess_range = c(1e-05, 0.02),
  m_perturbation_guess_range = log(c(0.1, 1.5)),
  g_perturbation_guess_range = log(c(0.5, 10)),
  alpha = 0.95
)
}
\arguments{
\item{m_fam}{family object describing gRNA counts}

\item{g_fam}{family object describing mRNA counts}

\item{covariate_matrix}{a data frame storing the covariates}

\item{m_offset}{the vector of offsets for mRNA model}

\item{g_offset}{the vector of offsets for gRNA model}

\item{n_em_rep}{number of times to repeat EM algorithm on "reduced" data}

\item{alpha}{confidence level of CIs}

\item{dat}{a data frame containing the columns "m" and "g"}
}
\value{
fitted model
}
\description{
Runs the EM algorithm using the fast initialization strategy.
The assumption is that n is big and pi is small. It is also assumed
(for now) that the covariate matrix is non-null.
}
\details{
NOTE: Maybe instead take precomputations, i.e. distillation offsets, as arguments.
}
\examples{
m_fam <- g_fam <- augment_family_object(poisson())
n <- 200000
lib_size <- rpois(n = n, lambda = 10000)
m_offset <- g_offset <- log(lib_size)
pi <- 0.005
m_intercept <- log(0.05)
m_perturbation <- log(0.75)
g_intercept <- log(0.025)
g_perturbation <- log(1.25)
covariate_matrix <- data.frame(batch = rbinom(n = n, size = 1, prob = 0.5))
m_covariate_coefs <- log(0.9)
g_covariate_coefs <- log(1.1)
dat <- generate_full_data(m_fam = m_fam, m_intercept = m_intercept,
m_perturbation = m_perturbation, g_fam = g_fam, g_intercept = g_intercept,
g_perturbation = g_perturbation, pi = pi, n = n, B = 2,
covariate_matrix = covariate_matrix, m_covariate_coefs = m_covariate_coefs,
g_covariate_coefs = g_covariate_coefs, m_offset = m_offset, g_offset = g_offset)[[1]]
m <- dat$m
g <- dat$g
fit <- run_em_algo_fast_init(m, g, m_fam, g_fam, covariate_matrix, m_offset, g_offset)
}
