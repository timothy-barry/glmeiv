% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reduced_em_algo_functs.R
\name{run_reduced_em_algo}
\alias{run_reduced_em_algo}
\title{Run univariate poisson EM algo}
\usage{
run_reduced_em_algo(
  m,
  g,
  exp_m_offset,
  exp_g_offset,
  m_pert_guess,
  g_pert_guess,
  pi_guess,
  m_fam,
  g_fam,
  ep_tol = 0.5 * 1e-04,
  max_it = 50
)
}
\arguments{
\item{m}{mRNA counts}

\item{g}{gRNA counts}

\item{exp_m_offset}{exponentiated m offsets (i.e., fitted values from mRNA GLM)}

\item{exp_g_offset}{exponentiated g offsets (i.e., fitted values from gRNA GLM)}

\item{m_pert_guess}{initial guess for m perturbation parameter}

\item{g_pert_guess}{initial guess for g perturbation parameter}

\item{pi_guess}{initial guess for pi}

\item{ep_tol}{relative tolerance limit for EM algorithm}

\item{max_it}{maximum number of iterations before giving up}
}
\value{
a list containing (i) the vector of estimates, (ii) log-likelihood of the fitted model, and (iii) the posterior membership probabilities.
}
\description{
This function aims to estimate three parameters: m_perturbation, g_perturbation, and pi.
}
\details{
The function takes offsets for the mRNA and gRNA modalities. It is assumed that all auxilliary information
(baseline expression level, library size, batch effect and other technical factors, etc.) has been distilled into
the offset vectors.

The function requires initial estimates for the parameters m_perturbation, g_perturbation, and pi.
}
\examples{
set.seed(4)
m_fam <- g_fam <- augment_family_object(poisson())
m_intercept <- 0
g_intercept <- 0
m_perturbation <- log(0.5) # -0.69
g_perturbation <- log(1.2) # 0.18
pi <- 0.01
n <- 100000
m_offset <- log(stats::rpois(n, 100))
g_offset <- log(stats::rpois(n, 50))
dat <- generate_full_data(m_fam = m_fam, m_intercept = m_intercept, m_perturbation = m_perturbation, g_fam = g_fam,
                          g_intercept = g_intercept, g_perturbation = g_perturbation, pi = pi, n = n, B = 2,
                          covariate_matrix = NULL, m_covariate_coefs = NULL, g_covariate_coefs = NULL, m_offset = m_offset, g_offset = g_offset)[[1]]
m_fit <- glm(formula = m ~ p + 0, family = m_fam, data = dat, offset = m_offset)
g_fit <- glm(formula = g ~ p + 0, family = g_fam, data = dat, offset = g_offset)
m_pert_guess <- log(runif(1, 0.1, 1.5))
g_pert_guess <- log(runif(1, 0.5, 10))
pi_guess <- runif(1, 0, 0.05)
m <- dat$m
g <- dat$g
exp_m_offset <- exp(m_offset)
exp_g_offset <- exp(g_offset)
fit_univariate <- run_reduced_em_algo(m, g, exp_m_offset, exp_g_offset, m_pert_guess, g_pert_guess, pi_guess, m_fam, g_fam)
}
