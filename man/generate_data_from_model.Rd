% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_data_functs.R
\name{generate_data_from_model}
\alias{generate_data_from_model}
\title{Generate data from model}
\usage{
generate_data_from_model(
  m_fam,
  g_fam,
  m_coef,
  g_coef,
  pi,
  covariate_matrix,
  m_offset = NULL,
  g_offset = NULL
)
}
\arguments{
\item{m_fam}{the augmented family object for M.}

\item{g_fam}{the augmented family object for G.}

\item{m_coef}{the coefficients of the GLM for M. The vector should be named; two of the names should be "intercept"
and "perturbation," and the other names should coincide with the column names of covariate_matrix.}

\item{g_coef}{the coefficients of the GLM for G. This vector should be named in a similar way to m_coef.}

\item{pi}{the probability of perturbation.}

\item{covariate_matrix}{the matrix of observed covariates; assumed to be fixed. Should be of class data.frame.}

\item{m_offset}{(optional) offsets for M.}

\item{g_offset}{(optional) offsets for G.}
}
\value{
a list containing m, g, and p.
}
\description{
Generates data from the GLM-EIV model. The model treats the (unobserved) binary perturbations as random and all other
covariates as fixed.
}
\examples{
library(magrittr)
n <- 10000
m_fam <- augment_family_object(poisson())
g_fam <- augment_family_object(poisson())
m_offset <- 0
g_offset <- 0
pi <- 0.2
covariate_matrix <- data.frame(p_mito = runif(n = n, 0, 10),
                               lib_size = rpois(n = n, lambda = 1))
m_coef <- c(-1, -2, 1, 0.5)
g_coef <- c(-1, 2, 1, 0.5)
generated_data <- generate_data_from_model(m_fam, g_fam, m_coef, g_coef, pi, covariate_matrix)
# verify that we recover ground truth when p is known
covariate_matrix_full <- data.frame(perturbation = generated_data$p) \%>\%
dplyr::mutate(covariate_matrix)
fit_m <- glm(formula = generated_data$m ~ ., family = m_fam, data = covariate_matrix_full)
fit_g <- glm(formula = generated_data$g ~ ., family = g_fam, data = covariate_matrix_full)
}
